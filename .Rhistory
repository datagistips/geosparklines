geoms <- st_sfc(out) %>% st_set_crs(4326)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(rgeos)
library(rgeos)
fr <- ne_countries(country = "france", scale = "medium", returnclass = "sf")
bb <- st_bbox(geoms)
ggplot(data=fr) +
geom_sf(data=fr) +
geom_sf(data=geoms, col=c("red", "blue", "green", "orange"), size = 1.2) +
coord_sf(xlim = c(-7, 12), ylim = c(40, 52), expand = FALSE) +
ggtitle(sprintf("Covid-19 cases sparklines (Burn-Murdoch's method)\n%s", last_day))
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(rgeos)
library(rgeos)
fr <- ne_countries(country = "france", scale = "medium", returnclass = "sf")
ggplot() +
geom_sf(data=fr) +
geom_sf(data=geoms, col=c("red", "blue", "green", "orange"), size = 1.2) +
coord_sf(xlim = c(-7, 12), ylim = c(40, 52), expand = FALSE) +
ggtitle(sprintf("Covid-19 cases sparklines (Burn-Murdoch's method)\n%s", last_day))
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(rgeos)
library(rgeos)
fr <- ne_countries(country = "france", scale = "medium", returnclass = "sf")
ggplot() +
geom_sf(data=fr) +
geom_sf(data=geoms, col=c("red", "blue", "green", "orange"), size = 1.2) +
coord_sf(xlim = c(-7, 12), ylim = c(40, 52), expand = FALSE) +
ggtitle(sprintf("Covid-19 cases sparklines (Burn-Murdoch's method)\n4-directions\n%s", last_day))
runif(1,2,4)
out <- lapply(c("ne", "nw", "se", "sw"), function(x) singleGeosparkBM(my_coords, my_values, width=runif(1,4,6), height=runif(1,2,4), n = 21, direction = x))
geoms <- st_sfc(out) %>% st_set_crs(4326)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(rgeos)
library(rgeos)
fr <- ne_countries(country = "france", scale = "medium", returnclass = "sf")
ggplot() +
geom_sf(data=fr) +
geom_sf(data=geoms, col=c("red", "blue", "green", "orange"), size = 1.2) +
coord_sf(xlim = c(-7, 12), ylim = c(40, 52), expand = FALSE) +
ggtitle(sprintf("Covid-19 cases sparklines (Burn-Murdoch's method)\n4-directions\n%s", last_day))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(geosparklines)
library(RcppRoll)
library(readr)
library(sf)
f <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
coords <- f[, c("Long", "Lat")]
col_dates <- grep("[0-9]*/[0-9]*/[0-9]*", names(f)) # select all column dates
my_stats <- data.frame(f)[, col_dates]
## Whole world
geosparks <- geosparkBM(coords, my_stats, width=4, height=2, direction = "ne") %>% st_set_crs(4326)
## Add geometries to data
st_geometry(f) <- geosparks
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(rgeos)
library(rgeos)
world <- ne_countries(scale = "medium", returnclass = "sf")
last_day <- names(f)[col_dates %>% tail(1)]
ggplot() +
geom_sf(data=world) +
geom_sf(data=f, col="red") +
coord_sf(xlim = c(-20, 30), ylim = c(25, 60), expand = FALSE) +
ggtitle(sprintf("Covid-19 cases sparklines (Burn-Murdoch's method)\n%s", last_day))
i <- which(f$`Country/Region`=="France" & is.na(f$`Province/State`))
my_values <- my_stats[i, ] %>% as.numeric
my_coords <- coords[i, ] %>% as.matrix
sp_line <- singleGeosparkBM(my_coords, my_values, width = 20, height = 20, n = 7)
plot(st_geometry(sp_line))
sp_line <- singleGeosparkBM(my_coords, my_values, width=20, height=20, n = 21)
plot(st_geometry(sp_line))
out <- lapply(c("ne", "nw", "se", "sw"), function(x) singleGeosparkBM(my_coords, my_values, width=runif(1,4,6), height=runif(1,2,4), n = 21, direction = x))
geoms <- st_sfc(out) %>% st_set_crs(4326)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(rgeos)
library(rgeos)
fr <- ne_countries(country = "france", scale = "medium", returnclass = "sf")
ggplot() +
geom_sf(data=fr) +
geom_sf(data=geoms, col=c("red", "blue", "green", "orange"), size = 1.2) +
coord_sf(xlim = c(-7, 12), ylim = c(40, 52), expand = FALSE) +
ggtitle(sprintf("Covid-19 cases sparklines (Burn-Murdoch's method)\n4-directions\n%s", last_day))
library(geosparklines)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(geosparklines)
library(RcppRoll)
library(readr)
library(sf)
f <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
coords <- f[, c("Long", "Lat")]
col_dates <- grep("[0-9]*/[0-9]*/[0-9]*", names(f)) # select all column dates
my_stats <- data.frame(f)[, col_dates]
## Whole world
geosparks <- geosparkBM(coords, my_stats, width=4, height=2, direction = "ne") %>% st_set_crs(4326)
## Add geometries to data
st_geometry(f) <- geosparks
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(rgeos)
library(rgeos)
world <- ne_countries(scale = "medium", returnclass = "sf")
last_day <- names(f)[col_dates %>% tail(1)]
ggplot() +
geom_sf(data=world) +
geom_sf(data=f, col="red") +
coord_sf(xlim = c(-20, 30), ylim = c(25, 60), expand = FALSE) +
ggtitle(sprintf("Covid-19 cases sparklines (Burn-Murdoch's method)\n%s", last_day))
i <- which(f$`Country/Region`=="France" & is.na(f$`Province/State`))
my_values <- my_stats[i, ] %>% as.numeric
my_coords <- coords[i, ] %>% as.matrix
sp_line <- singleGeosparkBM(my_coords, my_values, width = 20, height = 20, n = 7)
plot(st_geometry(sp_line))
sp_line <- singleGeosparkBM(my_coords, my_values, width=20, height=20, n = 21)
plot(st_geometry(sp_line))
out <- lapply(c("ne", "nw", "se", "sw"), function(x) singleGeosparkBM(my_coords, my_values, width=runif(1,4,6), height=runif(1,2,4), n = 21, direction = x))
geoms <- st_sfc(out) %>% st_set_crs(4326)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(rgeos)
library(rgeos)
fr <- ne_countries(country = "france", scale = "medium", returnclass = "sf")
ggplot() +
geom_sf(data=fr) +
geom_sf(data=geoms, col=c("red", "blue", "green", "orange"), size = 1.2) +
coord_sf(xlim = c(-7, 12), ylim = c(40, 52), expand = FALSE) +
ggtitle(sprintf("Covid-19 cases sparklines (Burn-Murdoch's method)\n4-directions\n%s", last_day))
#' Generates averaged Spatial Sparkline as Simple Feature Geometry (sfg)
#' @description Generate a Spatial Sparkline as Simple Feature Geometry (sfg) based on a method by Financial Times Data Visualization Designer John Burn-Murdoch
#'
#' @param my_coords Point coordinates
#' @param my_values Values associated to point
#' @param max_value Maximum value
#' @param width Width
#' @param height Height
#' @param direction Direction of lines, upward (north), downward (south), left (west) or right (east). For instance, "ne" will generate upward right lines.
#' @param n Window size (default = 7)
#'
#' @return returns a geometry (sfg)
#' @import magrittr sf dplyr RcppRoll
#' @importFrom utils head
#' @export
singleGeosparkBM <- function(my_coords, my_values, max_value = NULL, width, height, direction = "ne", n = 7) {
## Calculate difference of cases
v1 <- my_values
v2 <- lead(my_values, 1)
diff_cases <- v2 - v1
## Direction
diry <- ifelse(substr(direction, 1, 1) == "n", 1, -1)
dirx <- ifelse(substr(direction, 2, 2) == "e", 1, -1)
## Max Value
if(is.null(max_value)) max_value <- max(my_values)
## Roll mean that
roll_values <- roll_meanr(diff_cases, n)
roll_values <- roll_values[n:(length(roll_values)-1)] # padding : remove 7 first days and the last day because of leading
## Shift values if < 0
if(min(roll_values) < 0) {
roll_values <- roll_values - min(roll_values)
max_value <- max_value - min(roll_values)
}
## Skip zero values
w <- which(roll_values > 0) %>% head(1)
roll_values <- roll_values[w : length(roll_values)] # skip zero values
width2  <- width * (length(roll_values) / length(my_values)) # update width
## Log that
log_values <- ifelse(roll_values == 0, 0, log(roll_values))
## Shift log values to the first value
log_values2 <- log_values - log_values[1]
max_log_value <- log(max_value) - log(values[1])
## Calculate heights
mult <- height / max_log_value # changer multiplicateur
heights <- log_values2 * mult
coords_x <- my_coords[[1]] + dirx * seq(0, width2, length.out = (length(log_values2)))
coords_y <- my_coords[[2]] + diry * heights
coords_line <- cbind(coords_x, coords_y)
## Lines
sp_line <- st_linestring(coords_line)
return(sp_line)
}
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(rgeos)
library(rgeos)
fr <- ne_countries(country = "france", scale = "medium", returnclass = "sf")
ggplot() +
geom_sf(data=fr) +
geom_sf(data=geoms, col=c("red", "blue", "green", "orange"), size = 1.2) +
coord_sf(xlim = c(-7, 12), ylim = c(40, 52), expand = FALSE) +
ggtitle(sprintf("Covid-19 cases sparklines (Burn-Murdoch's method)\n4-directions\n%s", last_day))
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(rgeos)
library(rgeos)
fr <- ne_countries(country = "france", scale = "medium", returnclass = "sf")
ggplot() +
geom_sf(data=fr) +
geom_sf(data=geoms, col=c("red", "blue", "green", "orange"), size = 1.2) +
coord_sf(xlim = c(-7, 12), ylim = c(40, 52), expand = FALSE) +
ggtitle(sprintf("Covid-19 cases sparklines (Burn-Murdoch's method)\n4-directions\n%s", last_day))
my_coords
my_values
width=2
height=2
n=21
direction="ne"
## Calculate difference of cases
v1 <- my_values
v2 <- lead(my_values, 1)
diff_cases <- v2 - v1
## Direction
diry <- ifelse(substr(direction, 1, 1) == "n", 1, -1)
dirx <- ifelse(substr(direction, 2, 2) == "e", 1, -1)
## Max Value
if(is.null(max_value)) max_value <- max(my_values)
## Roll mean that
roll_values <- roll_meanr(diff_cases, n)
roll_values <- roll_values[n:(length(roll_values)-1)] # padding : remove 7 first days and the last day because of leading
## Shift values if < 0
if(min(roll_values) < 0) {
roll_values <- roll_values - min(roll_values)
max_value <- max_value - min(roll_values)
}
## Skip zero values
w <- which(roll_values > 0) %>% head(1)
roll_values <- roll_values[w : length(roll_values)] # skip zero values
width2  <- width * (length(roll_values) / length(my_values)) # update width
## Log that
log_values <- ifelse(roll_values == 0, 0, log(roll_values))
## Shift log values to the first value
log_values2 <- log_values - log_values[1]
max_log_value <- log(max_value) - log(values[1])
## Calculate heights
mult <- height / max_log_value # changer multiplicateur
heights <- log_values2 * mult
coords_x <- my_coords[[1]] + dirx * seq(0, width2, length.out = (length(log_values2)))
coords_y <- my_coords[[2]] + diry * heights
coords_line <- cbind(coords_x, coords_y)
## Calculate difference of cases
v1 <- my_values
v2 <- lead(my_values, 1)
diff_cases <- v2 - v1
## Direction
diry <- ifelse(substr(direction, 1, 1) == "n", 1, -1)
dirx <- ifelse(substr(direction, 2, 2) == "e", 1, -1)
## Calculate difference of cases
v1 <- my_values
v2 <- lead(my_values, 1)
?lead
library(dplyr)
library(magrittr)
library(sf)
v2 <- lead(my_values, 1)
diff_cases <- v2 - v1
## Direction
diry <- ifelse(substr(direction, 1, 1) == "n", 1, -1)
dirx <- ifelse(substr(direction, 2, 2) == "e", 1, -1)
library(RcppRoll)
## Max Value
if(is.null(max_value)) max_value <- max(my_values)
max_value = 30000
## Roll mean that
roll_values <- roll_meanr(diff_cases, n)
roll_values <- roll_values[n:(length(roll_values)-1)] # padding : remove 7 first days and the last day because of leading
min(roll_values)
if(min(roll_values) < 0) {
roll_values <- roll_values - min(roll_values)
max_value <- max_value - min(roll_values)
}
w <- which(roll_values > 0) %>% head(1)
roll_values <- roll_values[w : length(roll_values)] # skip zero values
width2  <- width * (length(roll_values) / length(my_values)) # update width
## Log that
log_values <- ifelse(roll_values == 0, 0, log(roll_values))
log_values
## Shift log values to the first value
log_values2 <- log_values - log_values[1]
log_values2
log_values
## Shift log values to the first value
log_values2 <- log_values - log_values[1]
max_log_value <- log(max_value) - log(values[1])
max_log_value <- log(max_value) - log_values[1]
max_log_value
## Calculate heights
mult <- height / max_log_value # changer multiplicateur
heights <- log_values2 * mult
coords_x <- my_coords[[1]] + dirx * seq(0, width2, length.out = (length(log_values2)))
coords_y <- my_coords[[2]] + diry * heights
coords_line <- cbind(coords_x, coords_y)
coords_y
my_coords[[2]]
#' Generates averaged Spatial Sparkline as Simple Feature Geometry (sfg)
#' @description Generate a Spatial Sparkline as Simple Feature Geometry (sfg) based on a method by Financial Times Data Visualization Designer John Burn-Murdoch
#'
#' @param my_coords Point coordinates
#' @param my_values Values associated to point
#' @param max_value Maximum value
#' @param width Width
#' @param height Height
#' @param direction Direction of lines, upward (north), downward (south), left (west) or right (east). For instance, "ne" will generate upward right lines.
#' @param n Window size (default = 7)
#'
#' @return returns a geometry (sfg)
#' @import magrittr sf dplyr RcppRoll
#' @importFrom utils head
#' @export
singleGeosparkBM <- function(my_coords, my_values, max_value = NULL, width, height, direction = "ne", n = 7) {
## Calculate difference of cases
v1 <- my_values
v2 <- lead(my_values, 1)
diff_cases <- v2 - v1
## Direction
diry <- ifelse(substr(direction, 1, 1) == "n", 1, -1)
dirx <- ifelse(substr(direction, 2, 2) == "e", 1, -1)
## Max Value
if(is.null(max_value)) max_value <- max(my_values)
## Roll mean that
roll_values <- roll_meanr(diff_cases, n)
roll_values <- roll_values[n:(length(roll_values)-1)] # padding : remove 7 first days and the last day because of leading
## Shift values if < 0
if(min(roll_values) < 0) {
roll_values <- roll_values - min(roll_values)
max_value <- max_value - min(roll_values)
}
## Skip zero values
w <- which(roll_values > 0) %>% head(1)
roll_values <- roll_values[w : length(roll_values)] # skip zero values
width2  <- width * (length(roll_values) / length(my_values)) # update width
## Log that
log_values <- ifelse(roll_values == 0, 0, log(roll_values))
## Shift log values to the first value
log_values2 <- log_values - log_values[1]
max_log_value <- log(max_value) - log_values[1]
## Calculate heights
mult <- height / max_log_value # changer multiplicateur
heights <- log_values2 * mult
coords_x <- my_coords[[1]] + dirx * seq(0, width2, length.out = (length(log_values2)))
coords_y <- my_coords[[2]] + diry * heights
coords_line <- cbind(coords_x, coords_y)
## Lines
sp_line <- st_linestring(coords_line)
return(sp_line)
}
out <- lapply(c("ne", "nw", "se", "sw"), function(x) singleGeosparkBM(my_coords, my_values, width=runif(1,4,6), height=runif(1,2,4), n = 21, direction = x))
geoms <- st_sfc(out) %>% st_set_crs(4326)
#' Generates averaged Spatial Sparkline as Simple Feature Geometry (sfg)
#' @description Generate a Spatial Sparkline as Simple Feature Geometry (sfg) based on a method by Financial Times Data Visualization Designer John Burn-Murdoch
#'
#' @param my_coords Point coordinates
#' @param my_values Values associated to point
#' @param max_value Maximum value
#' @param width Width
#' @param height Height
#' @param direction Direction of lines, upward (north), downward (south), left (west) or right (east). For instance, "ne" will generate upward right lines.
#' @param n Window size (default = 7)
#'
#' @return returns a geometry (sfg)
#' @import magrittr sf dplyr RcppRoll
#' @importFrom utils head
#' @export
singleGeosparkBM <- function(my_coords, my_values, max_value = NULL, width, height, direction = "ne", n = 7) {
## Calculate difference of cases
v1 <- my_values
v2 <- lead(my_values, 1)
diff_cases <- v2 - v1
## Direction
diry <- ifelse(substr(direction, 1, 1) == "n", 1, -1)
dirx <- ifelse(substr(direction, 2, 2) == "e", 1, -1)
## Max Value
if(is.null(max_value)) max_value <- max(my_values)
## Roll mean that
roll_values <- roll_meanr(diff_cases, n)
roll_values <- roll_values[n:(length(roll_values)-1)] # padding : remove 7 first days and the last day because of leading
## Shift values if < 0
if(min(roll_values) < 0) {
roll_values <- roll_values - min(roll_values)
max_value <- max_value - min(roll_values)
}
## Skip zero values
w <- which(roll_values > 0) %>% head(1)
roll_values <- roll_values[w : length(roll_values)] # skip zero values
width2  <- width * (length(roll_values) / length(my_values)) # update width
## Log that
log_values <- ifelse(roll_values == 0, 0, log(roll_values))
## Shift log values to the first value
log_values2 <- log_values - log_values[1]
max_log_value <- log(max_value) - log_values[1]
## Calculate heights
mult <- height / max_log_value # changer multiplicateur
heights <- log_values2 * mult
coords_x <- my_coords[[1]] + dirx * seq(0, width2, length.out = (length(log_values2)))
coords_y <- my_coords[[2]] + diry * heights
coords_line <- cbind(coords_x, coords_y)
print(coords_y[1] == my_coords[[2]])
## Lines
sp_line <- st_linestring(coords_line)
return(sp_line)
}
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(rgeos)
library(rgeos)
fr <- ne_countries(country = "france", scale = "medium", returnclass = "sf")
ggplot() +
geom_sf(data=fr) +
geom_sf(data=geoms, col=c("red", "blue", "green", "orange"), size = 1.2) +
coord_sf(xlim = c(-7, 12), ylim = c(40, 52), expand = FALSE) +
ggtitle(sprintf("Covid-19 cases sparklines (Burn-Murdoch's method)\n4-directions\n%s", last_day))
#' Generates averaged Spatial Sparkline as Simple Feature Geometry (sfg)
#' @description Generate a Spatial Sparkline as Simple Feature Geometry (sfg) based on a method by Financial Times Data Visualization Designer John Burn-Murdoch
#'
#' @param my_coords Point coordinates
#' @param my_values Values associated to point
#' @param max_value Maximum value
#' @param width Width
#' @param height Height
#' @param direction Direction of lines, upward (north), downward (south), left (west) or right (east). For instance, "ne" will generate upward right lines.
#' @param n Window size (default = 7)
#'
#' @return returns a geometry (sfg)
#' @import magrittr sf dplyr RcppRoll
#' @importFrom utils head
#' @export
singleGeosparkBM <- function(my_coords, my_values, max_value = NULL, width, height, direction = "ne", n = 7) {
## Calculate difference of cases
v1 <- my_values
v2 <- lead(my_values, 1)
diff_cases <- v2 - v1
## Direction
diry <- ifelse(substr(direction, 1, 1) == "n", 1, -1)
dirx <- ifelse(substr(direction, 2, 2) == "e", 1, -1)
## Max Value
if(is.null(max_value)) max_value <- max(my_values)
## Roll mean that
roll_values <- roll_meanr(diff_cases, n)
roll_values <- roll_values[n:(length(roll_values)-1)] # padding : remove 7 first days and the last day because of leading
## Shift values if < 0
if(min(roll_values) < 0) {
roll_values <- roll_values - min(roll_values)
max_value <- max_value - min(roll_values)
}
## Skip zero values
w <- which(roll_values > 0) %>% head(1)
roll_values <- roll_values[w : length(roll_values)] # skip zero values
width2  <- width * (length(roll_values) / length(my_values)) # update width
## Log that
log_values <- ifelse(roll_values == 0, 0, log(roll_values))
## Shift log values to the first value
log_values2 <- log_values - log_values[1]
max_log_value <- log(max_value) - log_values[1]
## Calculate heights
mult <- height / max_log_value # changer multiplicateur
heights <- log_values2 * mult
coords_x <- my_coords[[1]] + dirx * seq(0, width2, length.out = (length(log_values2)))
coords_y <- my_coords[[2]] + diry * heights
coords_line <- cbind(coords_x, coords_y)
## Lines
sp_line <- st_linestring(coords_line)
return(sp_line)
}
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(rgeos)
library(rgeos)
fr <- ne_countries(country = "france", scale = "medium", returnclass = "sf")
ggplot() +
geom_sf(data=fr) +
geom_sf(data=geoms, col=c("red", "blue", "green", "orange"), size = 1.2) +
coord_sf(xlim = c(-7, 12), ylim = c(40, 52), expand = FALSE) +
ggtitle(sprintf("Covid-19 cases sparklines (Burn-Murdoch's method)\n4-directions\n%s", last_day))
library(geosparklines)
library(geosparklines)
library(RcppRoll)
library(readr)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(rgeos)
library(rgeos)
fr <- ne_countries(country = "france", scale = "medium", returnclass = "sf")
ggplot() +
geom_sf(data=fr) +
geom_sf(data=geoms, col=c("red", "blue", "green", "orange"), size = 1.2) +
coord_sf(xlim = c(-7, 12), ylim = c(40, 52), expand = FALSE) +
ggtitle(sprintf("Covid-19 cases sparklines (Burn-Murdoch's method)\n4-directions with random widths and heights\n%s", last_day))
geoms
geoms[[1]] %>% st_coordinates %>% tail(1)
singleGeospark(my_coords, my_values, width=20, height=20) %>% st_coordinates %>% tail(1)
